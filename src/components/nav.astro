---
// Astro component
const currentRoute = Astro.url.pathname;
const navItems = [
  { name: "Home", href: "/" },
  { name: "Blog", href: "/blog" },
  { name: "Smidgeons", href: "/smidgeons" },
  { name: "CV", href: "/cv" },
  { name: "Contact", href: "/contact" },
];
---

<div
  class="fixed top-0 left-0 right-0 z-50 flex justify-center pt-4 text-white"
>
  <nav
    class="relative inline-block mx-auto transition-colors duration-300 border rounded-full backdrop-blur-xl backdrop-opacity-100"
    id="nav"
    data-current-route={currentRoute}
  >
    <ul class="relative flex md:space-x-2 text-md md:text-2xl">
      <!-- Hover indicator -->
      <div
        id="hover-indicator"
        class="absolute top-0 left-0 z-0 h-full transition-all duration-300 rounded-full pointer-events-none backdrop-blur-md transition-none"
        style="width: 0px; transform: translateX(0px);"
        view-transition-name="nav-indicator"
      >
      </div>

      <!-- Nav items -->
      {
        navItems.map((item) => (
          <li
            class="relative z-10 rounded-full cursor-pointer"
            data-href={item.href}
          >
            <a href={item.href}>
              <div class="px-3 md:px-4 py-2">{item.name}</div>
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<script>
  const nav = document.getElementById("nav")!;
  const indicator = document.getElementById("hover-indicator")!;

  const route = nav.dataset.currentRoute;
  const items = [...nav.querySelectorAll("li")];

  const match = (href: string | undefined) =>
    route &&
    href &&
    (route === href || (href !== "/" && route.startsWith(href)));

  const activeItem = items.find((li) => match(li.dataset.href));

  function moveTo(el: HTMLElement) {
    const { offsetLeft, offsetWidth } = el;
    indicator.style.width = `${offsetWidth}px`;
    indicator.style.transform = `translateX(${offsetLeft}px)`;
  }

  if (activeItem) {
    indicator.classList.add("transition-none");
    moveTo(activeItem);
    setTimeout(() => indicator.classList.remove("transition-none"), 20);
  }

  items.forEach((li) => {
    li.addEventListener("mouseenter", () => moveTo(li));
  });

  nav.addEventListener("mouseleave", () => {
    if (activeItem) moveTo(activeItem);
  });
</script>

<style>
  @reference "tailwindcss";
  nav {
    @apply border-white/20 bg-black/25;
    background-color: color-mix(
      in oklab,
      var(--color-primary-800) 30%,
      transparent
    );

    #hover-indicator {
      @apply bg-white/20;
    }
    .transition-none {
      transition: none !important;
    }
  }
</style>
