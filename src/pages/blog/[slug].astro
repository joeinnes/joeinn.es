---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Signature from "../../components/Signature.svelte";

const { slug } = Astro.params;
if (!slug) throw new Error("Slug not found");
const post = await getEntry("posts", slug);

if (!post) throw new Error("No post found for this slug");
const { Content } = await post.render();

// Generate static pages
export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({ params: { slug: post.slug } }));
}
---

<Layout title={post.data.title} bg={post.data.page_bg}>
  <article
    class="relative mx-auto mb-8 overflow-hidden prose bg-white shadow-2xl lg:prose-xl prose-headings:font-bold prose-zinc rounded-xl prose-li:ml-4 md:prose-li:ml-0"
    style="width: min(65ch, 100%);"
  >
    {
      post.data.featured_image && (
        <div class="aspect-[21/9] header-image content not-prose shadow !p-0">
          <img
            alt={post.data.title}
            src={
              post.data.featured_image ||
              "https://source.unsplash.com/random/?" +
                encodeURIComponent(post.data.title)
            }
            style="padding: 0px"
            class="aspect-[4/3] md:aspect-[21/9] object-cover rounded-none"
          />
        </div>
      )
    }
    <hgroup class="content meta">
      <h1>{post.data.title}</h1>
      <small
        >{
          new Intl.DateTimeFormat("en-GB", {
            dateStyle: "full",
            timeStyle: "short",
            hour12: true,
          }).format(new Date(post.data.date))
        }.</small
      >
    </hgroup>
    <div class="content">
      <Content />
      <div
        class="flex justify-end"
        style={`grid-column: 2; color: ${post.data.page_bg}`}
      >
        <Signature client:load />
      </div>
    </div>
  </article>
</Layout>

<style>
  @reference "tailwindcss"
	:global(.header-image) {
    @apply py-0;
  }
  :global(.content) {
    @apply grid pt-4 pb-8;
    grid-template-columns: 1fr min(55ch, 100%) 1fr;
  }

  :global(.content > *) {
    @apply px-4;
    grid-column: 2;
  }

  :global(.content.meta h1) {
    @apply mb-2;
  }

  :global(hgroup.content.meta) {
    @apply pb-0;
  }

  :global(.content > picture) {
    @apply p-0;
  }

  :global(picture, img, .full-bleed, p:has(img), .content > p:has(img)) {
    @apply max-w-full w-full p-0 rounded-none;
    grid-column: 1 / -1 !important;
  }
</style>
